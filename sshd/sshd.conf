######## Logstash SSHD filter: Log SSH key fingerprints, Logins and denied access. ########
#
# File /etc/ssh/sshd_config with "LogLevel VERBOSE"
# chown root:logstash /var/log/secure && chmod 640 /var/log/secure
# 
######## How to get all fingerprints for .ssh/authorized_keys file (Bash).
#
# function fingerprints() {   local file="$1";   while read l; do [[ -n $l && ${l###} = $l ]] && ssh-keygen -l -f /dev/stdin <<<$l;   done < $file; }		 #
# fingerprints .ssh/authorized_keys
#
##########################################################################################


input {

  file {
        path => "/var/log/secure" # LogLevel VERBOSE in /etc/ssh/sshd_config
#       add_field => { "node" => "XXXXX"  }
        start_position => "beginning"
        type => "ssh_access"
        codec => multiline {
                            pattern => "(.*Accepted publickey for .*|.*session opened for use.*)" 
                            negate => false
                            what => previous
                	   }
  }
}

########

filter {

	if [type] == "ssh_access" {
    		grok {
            		match => [ "message", "%{SYSLOGTIMESTAMP:timestamp} %{WORD} sshd\[%{NUMBER:pid_client}\]: Found matching RSA key: %{GREEDYDATA:ssh_key}\n.* Accepted publickey for %{WORD:user} from %{IPORHOST:clientip} port %{NUMBER:client_port} ssh2.*" ]
			match => [ "message", "%{SYSLOGTIMESTAMP:timestamp} %{WORD} sshd\[%{NUMBER:pid_client}\]: Accepted password for %{WORD:user} from %{IPORHOST:clientip} .*" ]
            		match => [ "message", "%{SYSLOGTIMESTAMP:timestamp} %{WORD} sshd\[%{NUMBER:pid_client}\]: Invalid user %{WORD:user} from %{IPORHOST:clientip}" ]
            		match => [ "message", "%{SYSLOGTIMESTAMP:timestamp} %{WORD} sshd\[%{NUMBER:pid_client}\]: Failed publickey for root from %{IPORHOST:clientip} port %{NUMBER:client_port} ssh2" ]
			match => [ "message", "%{SYSLOGTIMESTAMP:timestamp} %{WORD} sshd\[%{NUMBER:pid_client}\]: pam_unix\(sshd\:session\): session closed for user %{WORD:user}" ]
			match => [ "message", "%{SYSLOGTIMESTAMP:timestamp} %{WORD} sshd\[%{NUMBER:pid_client}\]: pam_unix\(sshd\:auth\): authentication failure.* rhost=%{IPORHOST:clientip}  user=%{WORD:user}" ]
    		}
         
		if [ssh_key] == "a2:8f:3f:d0:80:6b:68:17:2d:77:7e:3c:79:d1:ae:90" { mutate { add_field => { "user_key" => "USER1" }}}
        	if [ssh_key] == "d4:4c:4c:8b:ff:e4:3a:05:1c:a8:2d:cd:ea:e4:3c:76" { mutate { add_field => { "user_key" => "USER2" }}}
        	if [ssh_key] == "1c:a2:80:b8:dd:c0:a0:d0:fe:06:cf:3e:13:28:63:0f" { mutate { add_field => { "user_key" => "USER3" }}}

		date { match => [ "timestamp" , "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ] target => "@timestamp" remove_field => "timestamp"}
		if "_grokparsefailure" in [tags] { drop { }   }
	}
}

########

output { 
	stdout { codec => rubydebug }
       }
